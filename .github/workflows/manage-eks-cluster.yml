name: Manage EKS Cluster

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: "Name of the EKS cluster"
        required: true
      region:
        description: "AWS Region for the cluster"
        required: true
      action:
        description: "Action to perform (apply/destroy)"
        required: true
        default: "apply"
      port_payload:
        required: true
        description: "Port's payload (who triggered, context, etc...)"
        type: string

env:
  GITHUB_USERNAME: ${{ github.repository_owner }}
jobs:
  manage_cluster:
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    if: ${{ github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version

      - name: Fetch Secrets from Akeyless
        id: fetch-akeyless-secrets
        uses: akeyless-community/akeyless-github-action@v1.1.1
        with:
          access-id: ${{ vars.AKEYLESS_ACCESS_ID }}
          access-type: jwt
          static-secrets: |
            - name: "/Workshops/Akeyless-Port-1/${{ env.GITHUB_USERNAME }}/port/creds"
              output-name: "PORT_CREDS"
          dynamic-secrets: |
            - name: "/Workshops/Akeyless-Port-1/${{ env.GITHUB_USERNAME }}/AWS-Dynamic"
              output-name: "aws_dynamic_secret"
        continue-on-error: true

      - name: Check Akeyless Secrets Fetch Status
        run: |
          if [ "${{ steps.fetch-akeyless-secrets.outcome }}" == "failure" ]; then
            echo "::error::Failed to fetch secrets from Akeyless"
            echo "Debugging information:"
            echo "GitHub Username: ${{ env.GITHUB_USERNAME }}"
            echo "Access ID: ${{ vars.AKEYLESS_ACCESS_ID }}"
            exit 1
          fi

      - name: Put Port Credentials into Environment Variables
        run: |
          if [ -z "${{ steps.fetch-akeyless-secrets.outputs.PORT_CREDS }}" ]; then
            echo "::error::PORT_CREDS is empty"
            exit 1
          fi
          # Debug the JSON format (will be masked in logs)
          echo "PORT_CREDS format: $(echo '${{ steps.fetch-akeyless-secrets.outputs.PORT_CREDS }}' | jq -r 'type')"
          
          # Remove any potential whitespace and ensure proper JSON formatting
          CLEANED_CREDS=$(echo '${{ steps.fetch-akeyless-secrets.outputs.PORT_CREDS }}' | tr -d '[:space:]')
          
          # Extract values with error checking
          CLIENT_ID=$(echo "$CLEANED_CREDS" | jq -r '.client_id // empty')
          CLIENT_SECRET=$(echo "$CLEANED_CREDS" | jq -r '.client_secret // empty')
          
          if [ -z "$CLIENT_ID" ] || [ -z "$CLIENT_SECRET" ]; then
            echo "::error::Failed to parse client_id or client_secret from credentials"
            exit 1
          fi
          
          echo "PORT_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "PORT_CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV

      - name: Export AWS Creds to Environment
        run: |
          echo '${{ steps.fetch-akeyless-secrets.outputs.aws_dynamic_secret }}' | jq -r 'to_entries|map("AWS_\(.key|ascii_upcase)=\(.value|tostring)")|.[]' >> $GITHUB_ENV

      # Setup AWS CLI
      - name: Configure AWS Credentials
        run: |
          # env | grep -i aws
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Create a log message (apply)
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: "Initiating creation of EKS cluster: ${{ inputs.cluster_name }}."

      - name: Generate backend.hcl
        run: |
          echo "key = \"workshop-port-akeyless-1-${{ env.GITHUB_USERNAME }}/terraform.tfstate\"" > backend.hcl
          sleep 30 # Wait for AWS to assign IAM permissions to the credentials

      - name: Terraform Init
        run: terraform init -backend-config=backend.hcl

      - name: Terraform Format
        run: terraform fmt

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        id: terraform_apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve
        env:
          TF_VAR_cluster_name: ${{ github.event.inputs.cluster_name }}-${{ env.GITHUB_USERNAME }}
          TF_VAR_region: ${{ github.event.inputs.region }}
          TF_VAR_port_run_id: ${{ fromJson(inputs.port_payload).context.runId }}

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve
        env:
          TF_VAR_cluster_name: ${{ fromJson(inputs.port_payload).payload.entity.properties.name }}
          TF_VAR_region: ${{ github.event.inputs.region }}
          TF_VAR_port_run_id: ${{ fromJson(inputs.port_payload).context.runId }}

      - name: Create a log message (post-action)
        uses: port-labs/port-github-action@v1
        if: ${{ github.event.inputs.action == 'apply' }}
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: 'EKS cluster creation has been completed and here is its name: ${{ github.event.inputs.cluster_name }}.'

      - name: Create a log message (post-action)
        uses: port-labs/port-github-action@v1
        if: ${{ github.event.inputs.action == 'destroy' }}
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: 'EKS cluster destruction has been completed for this cluster name: ${{ github.event.inputs.cluster_name }}.'
